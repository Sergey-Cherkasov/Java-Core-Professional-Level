Важно! Если мы создадим экземпляр класса File:
File file = new File(“Harry Potter and Philosopher’s Stone.mp4”);
Это ни в коем случае не означает, что мы загрузим этот фильм в память и будем с ним работать, file будет хранить в себе просто пусть к этому файлу.
Также важно знать что мы можем указать путь даже на несуществующий файл или каталог, ведь это всего лишь путь.
Важно! Метод int read() считывает один байт из потока и возвращает int в диапазоне от 0 до 255, который представляет собой полученный байт. То есть мы получим не совсем привычный для Java знаковый байт (в диапазоне -128 до 127), а именно беззнаковый байт в пределах 0 до 255.
Важно! Если мы прочитали весь поток, и данных в нем больше нет, то следующий вызов метода read() вернет значение -1, по которому мы можем определять завершение чтения потока.
Важно! Метод int read(byte[] arr) возвращает количество прочитанных байт в виде int значения.
Важно! При выполнении каждой операции write(), Java выполняет вызов нативного метода для записи данных, что является “довольно тяжелой” операцией. Выполнить запись байтового массива размером в 1 миллион элементов (1024 * 1024) за одну операцию write() будет выполнено во много-много раз быстрее, чем делать 1 миллион отдельных write(). (При условии что мы не учитываем буферизацию, но об этом позже).
Важно! Для ускорения записи либо используйте буферизацию, либо выполняйте запись кусками (массивами) по десятку-сотне-тысяче байт.
